local function UpdateSize()
    local cS = pageListing.AbsoluteContentSize

    game.TweenService:Create(page, TweenInfo.new(0.15, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
        CanvasSize = UDim2.new(0, cS.X, 0, cS.Y)
    }):Play()
end

local page = Instance.new("ScrollingFrame")
local pageListing = Instance.new("UIListLayout")

page.Name = "Page"
page.Parent = Pages
page.Active = true
page.BackgroundColor3 = themeList.Background
page.BorderSizePixel = 0
page.Position = UDim2.new(0, 0, -0.00371747208, 0)
page.Size = UDim2.new(1, 0, 1, 0)
page.ScrollBarThickness = 5
page.Visible = false
page.ScrollBarImageColor3 = Color3.fromRGB(themeList.SchemeColor.r * 255 - 16, themeList.SchemeColor.g * 255 - 15, themeList.SchemeColor.b * 255 - 28)

pageListing.Name = "pageListing"
pageListing.Parent = page
pageListing.SortOrder = Enum.SortOrder.LayoutOrder
pageListing.Padding = UDim.new(0, 5)

local function UpdateSize()
    local cS = pageListing.AbsoluteContentSize

    game.TweenService:Create(page, TweenInfo.new(0.15, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
        CanvasSize = UDim2.new(0, cS.X, 0, cS.Y)
    }):Play()
end

local Tabs = {}
local first = true

function Tabs:NewTab(tabName)
    tabName = tabName or "Tab"
    local tabButton = Instance.new("TextButton")
    local UICorner = Instance.new("UICorner")

    tabButton.Name = tabName .. "TabButton"
    tabButton.Parent = tabFrames
    tabButton.BackgroundColor3 = themeList.SchemeColor
    Objects[tabButton] = "SchemeColor"
    tabButton.Size = UDim2.new(0, 135, 0, 28)
    tabButton.AutoButtonColor = false
    tabButton.Font = Enum.Font.Gotham
    tabButton.Text = tabName
    tabButton.TextColor3 = themeList.TextColor
    Objects[tabButton] = "TextColor3"
    tabButton.TextSize = 14.000
    tabButton.BackgroundTransparency = 1

    if first then
        first = false
        page.Visible = true
        tabButton.BackgroundTransparency = 0
        UpdateSize()
    else
        page.Visible = false
        tabButton.BackgroundTransparency = 1
    end

    UICorner.CornerRadius = UDim.new(0, 5)
    UICorner.Parent = tabButton
    table.insert(Tabs, tabName)

    UpdateSize()
    page.ChildAdded:Connect(UpdateSize)
    page.ChildRemoved:Connect(UpdateSize)

    tabButton.MouseButton1Click:Connect(function()
        UpdateSize()
        for i, v in next, Pages:GetChildren() do
            v.Visible = false
        end
        page.Visible = true
        for i, v in next, tabFrames:GetChildren() do
            if v:IsA("TextButton") then
                if themeList.SchemeColor == Color3.fromRGB(255, 255, 255) then
                    Utility:TweenObject(v, { TextColor3 = Color3.fromRGB(255, 255, 255) }, 0.2)
                end
                if themeList.SchemeColor == Color3.fromRGB(0, 0, 0) then
                    Utility:TweenObject(v, { TextColor3 = Color3.fromRGB(0, 0, 0) }, 0.2)
                end
                Utility:TweenObject(v, { BackgroundTransparency = 1 }, 0.2)
            end
        end
        if themeList.SchemeColor == Color3.fromRGB(255, 255, 255) then
            Utility:TweenObject(tabButton, { TextColor3 = Color3.fromRGB(0, 0, 0) }, 0.2)
        end
        if themeList.SchemeColor == Color3.fromRGB(0, 0, 0) then
            Utility:TweenObject(tabButton, { TextColor3 = Color3.fromRGB(255, 255, 255) }, 0.2)
        end
        Utility:TweenObject(tabButton, { BackgroundTransparency = 0 }, 0.2)
    end)

    local Sections = {}
    local focusing = false
    local viewDe = false

    coroutine.wrap(function()
        while wait() do
            page.BackgroundColor3 = themeList.Background
            page.ScrollBarImageColor3 = Color3.fromRGB(themeList.SchemeColor.r * 255 - 16, themeList.SchemeColor.g * 255 - 15, themeList.SchemeColor.b * 255 - 28)
            tabButton.TextColor3 = themeList.TextColor
            tabButton.BackgroundColor3 = themeList.SchemeColor
        end
    end)()

    function Sections:NewSection(secName, hidden)
        secName = secName or "Section"
        local sectionFunctions = {}
        local modules = {}
        hidden = hidden or false
        local sectionFrame = Instance.new("Frame")
        local sectionlistoknvm = Instance.new("UIListLayout")
        local sectionHead = Instance.new("Frame")
        local sHeadCorner = Instance.new("UICorner")
        local sectionName = Instance.new("TextLabel")
        local sectionInners = Instance.new("Frame")
        local sectionElListing = Instance.new("UIListLayout")

        if hidden then
            sectionHead.Visible = false
        else
            sectionHead.Visible = true
        end

        sectionFrame.Name = "sectionFrame"
        sectionFrame.Parent = page
        sectionFrame.BackgroundColor3 = themeList.Background --36, 37, 43
        sectionFrame.BorderSizePixel = 0

        sectionlistoknvm.Name = "sectionlistoknvm"
        sectionlistoknvm.Parent = sectionFrame
        sectionlistoknvm.SortOrder = Enum.SortOrder.LayoutOrder
        sectionlistoknvm.Padding = UDim.new(0, 5)

        for i, v in pairs(sectionInners:GetChildren()) do
            while wait() do
                if v:IsA("Frame") or v:IsA("TextButton") then
                    function size(pro)
                        if pro == "Size" then
                            UpdateSize()
                            updateSectionFrame()
                        end
                    end
                    v.Changed:Connect(size)
                end
            end
        end
    end

    return Sections
end
